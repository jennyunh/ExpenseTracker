{"ast":null,"code":"var _jsxFileName = \"/Users/jennyhwang/Downloads/01-starting-setup/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Expenses from \"./components/ExpenseSection/Expenses\";\nimport NewExpenses from \"./components/NewExpenses/NewExpenses\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [thisData, setData] = useState(null);\n  const [thisDataYear, setDataYear] = useState(null);\n  const expenses = [{\n    id: \"e1\",\n    title: \"Toilet Paper\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14)\n  }, {\n    id: \"e2\",\n    title: \"New TV\",\n    amount: 799.49,\n    date: new Date(2021, 2, 12)\n  }, {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28)\n  }, {\n    id: \"e4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2021, 5, 12)\n  }];\n\n  const fetchExpenseData = data => {\n    let dataCopy = { ...data,\n      id: Math.random().toString()\n    };\n    setData(dataCopy); //get date object\n\n    let date = dataCopy.date; //year is of type number\n\n    let year = date.getFullYear();\n    setDataYear(year);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewExpenses, {\n      saveExpenseData: fetchExpenseData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Expenses, {\n      transferData: thisData,\n      year: thisDataYear,\n      list: expenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"n1gyme1VNW0PSSzl+E6totAXVyM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jennyhwang/Downloads/01-starting-setup/src/App.js"],"names":["Expenses","NewExpenses","React","useState","App","thisData","setData","thisDataYear","setDataYear","expenses","id","title","amount","date","Date","fetchExpenseData","data","dataCopy","Math","random","toString","year","getFullYear"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,sCAArB;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,OAAX,IAAsBH,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAM,CAACI,YAAD,EAAeC,WAAf,IAA8BL,QAAQ,CAAC,IAAD,CAA5C;AAEA,QAAMM,QAAQ,GAAG,CACf;AACEC,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,KAAK,EAAE,cAFT;AAGEC,IAAAA,MAAM,EAAE,KAHV;AAIEC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,GADe,EAOf;AAAEJ,IAAAA,EAAE,EAAE,IAAN;AAAYC,IAAAA,KAAK,EAAE,QAAnB;AAA6BC,IAAAA,MAAM,EAAE,MAArC;AAA6CC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAAnD,GAPe,EAQf;AACEJ,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,KAAK,EAAE,eAFT;AAGEC,IAAAA,MAAM,EAAE,MAHV;AAIEC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,GARe,EAcf;AACEJ,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,KAAK,EAAE,mBAFT;AAGEC,IAAAA,MAAM,EAAE,GAHV;AAIEC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,GAde,CAAjB;;AAuBA,QAAMC,gBAAgB,GAAIC,IAAD,IAAU;AACjC,QAAIC,QAAQ,GAAG,EACb,GAAGD,IADU;AAEbN,MAAAA,EAAE,EAAEQ,IAAI,CAACC,MAAL,GAAcC,QAAd;AAFS,KAAf;AAKAd,IAAAA,OAAO,CAACW,QAAD,CAAP,CANiC,CAQjC;;AACA,QAAIJ,IAAI,GAAGI,QAAQ,CAACJ,IAApB,CATiC,CAWjC;;AACA,QAAIQ,IAAI,GAAGR,IAAI,CAACS,WAAL,EAAX;AAEAd,IAAAA,WAAW,CAACa,IAAD,CAAX;AACD,GAfD;;AAkBA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,eAAe,EAAEN;AAA9B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,YAAY,EAAEV,QAAxB;AAAkC,MAAA,IAAI,EAAEE,YAAxC;AAAsD,MAAA,IAAI,EAAEE;AAA5D;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GApDQL,G;;KAAAA,G;AAsDT,eAAeA,GAAf","sourcesContent":["import Expenses from \"./components/ExpenseSection/Expenses\";\nimport NewExpenses from \"./components/NewExpenses/NewExpenses\";\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const [thisData, setData] = useState(null);\n\n  const [thisDataYear, setDataYear] = useState(null);\n\n  const expenses = [\n    {\n      id: \"e1\",\n      title: \"Toilet Paper\",\n      amount: 94.12,\n      date: new Date(2020, 7, 14),\n    },\n    { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n    {\n      id: \"e3\",\n      title: \"Car Insurance\",\n      amount: 294.67,\n      date: new Date(2021, 2, 28),\n    },\n    {\n      id: \"e4\",\n      title: \"New Desk (Wooden)\",\n      amount: 450,\n      date: new Date(2021, 5, 12),\n    },\n  ];\n\n\n  const fetchExpenseData = (data) => {\n    let dataCopy = {\n      ...data,\n      id: Math.random().toString(),\n    };\n\n    setData(dataCopy);\n\n    //get date object\n    let date = dataCopy.date;\n\n    //year is of type number\n    let year = date.getFullYear();\n\n    setDataYear(year);\n  };\n  \n\n  return (\n    <div>\n      <NewExpenses saveExpenseData={fetchExpenseData} />\n      <Expenses transferData={thisData} year={thisDataYear} list={expenses} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}