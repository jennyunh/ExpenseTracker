{"ast":null,"code":"var _jsxFileName = \"/Users/jennyhwang/Downloads/01-starting-setup/src/components/ExpenseSection/Expenses.js\",\n    _s = $RefreshSig$();\n\nimport ExpenseItem from \"./ExpenseItem\";\nimport \"./Expenses.css\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport React, { useState } from \"react\";\n/*Props passed from app.js */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Expenses(props) {\n  _s();\n\n  //selected year in the filter dropdown\n  const [selectedYear, setSelectedYear] = useState(2020); //filtered list.\n\n  const filteredExpenses = props.list.filter(ele => ele.date.getYear() + 1900 === Number(selectedYear));\n\n  function filterHandler(e) {\n    let pickedYear = e.target.value;\n    setSelectedYear(pickedYear);\n  }\n\n  let expensesContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No Expenses found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 25\n  }, this);\n\n  if (filteredExpenses.length > 0) {\n    expensesContent = filteredExpenses.map(ele => {\n      return /*#__PURE__*/_jsxDEV(ExpenseItem, {\n        date: ele.date,\n        title: ele.title,\n        amount: ele.amount\n      }, ele.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expenses\",\n    children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n      year: props.year,\n      selectedYear: props.selectedYear,\n      filterhandler: filterHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), expensesContent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Expenses, \"67v7tYL9RvuozmSFfTKNffaDIDs=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["/Users/jennyhwang/Downloads/01-starting-setup/src/components/ExpenseSection/Expenses.js"],"names":["ExpenseItem","ExpensesFilter","React","useState","Expenses","props","selectedYear","setSelectedYear","filteredExpenses","list","filter","ele","date","getYear","Number","filterHandler","e","pickedYear","target","value","expensesContent","length","map","title","amount","id","year"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAO,gBAAP;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA;;;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,IAAD,CAAhD,CAFuB,CAIvB;;AACA,QAAMK,gBAAgB,GAAGH,KAAK,CAACI,IAAN,CAAWC,MAAX,CACtBC,GAAD,IAASA,GAAG,CAACC,IAAJ,CAASC,OAAT,KAAqB,IAArB,KAA8BC,MAAM,CAACR,YAAD,CADtB,CAAzB;;AAIA,WAASS,aAAT,CAAuBC,CAAvB,EAA0B;AACxB,QAAIC,UAAU,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA1B;AACAZ,IAAAA,eAAe,CAACU,UAAD,CAAf;AACD;;AAED,MAAIG,eAAe,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAtB;;AAEA,MAAIZ,gBAAgB,CAACa,MAAjB,GAA0B,CAA9B,EAAiC;AAC/BD,IAAAA,eAAe,GAAGZ,gBAAgB,CAACc,GAAjB,CAAsBX,GAAD,IAAS;AAC9C,0BACE,QAAC,WAAD;AAEE,QAAA,IAAI,EAAEA,GAAG,CAACC,IAFZ;AAGE,QAAA,KAAK,EAAED,GAAG,CAACY,KAHb;AAIE,QAAA,MAAM,EAAEZ,GAAG,CAACa;AAJd,SACOb,GAAG,CAACc,EADX;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KATiB,CAAlB;AAUD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE,QAAC,cAAD;AACE,MAAA,IAAI,EAAEpB,KAAK,CAACqB,IADd;AAEE,MAAA,YAAY,EAAErB,KAAK,CAACC,YAFtB;AAGE,MAAA,aAAa,EAAES;AAHjB;AAAA;AAAA;AAAA;AAAA,YADF,EAeGK,eAfH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GAjDQhB,Q;;KAAAA,Q;AAmDT,eAAeA,QAAf","sourcesContent":["import ExpenseItem from \"./ExpenseItem\";\nimport \"./Expenses.css\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport React, { useState } from \"react\";\n\n/*Props passed from app.js */\nfunction Expenses(props) {\n  //selected year in the filter dropdown\n  const [selectedYear, setSelectedYear] = useState(2020);\n\n  //filtered list.\n  const filteredExpenses = props.list.filter(\n    (ele) => ele.date.getYear() + 1900 === Number(selectedYear)\n  );\n\n  function filterHandler(e) {\n    let pickedYear = e.target.value;\n    setSelectedYear(pickedYear);\n  }\n\n  let expensesContent = <p>No Expenses found.</p>;\n\n  if (filteredExpenses.length > 0) {\n    expensesContent = filteredExpenses.map((ele) => {\n      return (\n        <ExpenseItem\n          key={ele.id}\n          date={ele.date}\n          title={ele.title}\n          amount={ele.amount}\n        />\n      );\n    });\n  }\n\n  return (\n    <div className=\"expenses\">\n      <ExpensesFilter\n        year={props.year}\n        selectedYear={props.selectedYear}\n        filterhandler={filterHandler}\n      />\n\n      {/* NEW KNOWLEDGE\nShortened ternary expression form: \nSome condition && desired return value if condition is met.\n\nWhen there is no expenses for a chosen filtered year, return \"no expenses found\" EXAMPLE:\n{filteredExpenses.length === 0 && <p> NO EXPENSES FOUND. </p>}\n*/}\n\n      {expensesContent}\n\n    </div>\n  );\n}\n\nexport default Expenses;\n"]},"metadata":{},"sourceType":"module"}